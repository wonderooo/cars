services:
  kafka:
    container_name: kafka
    image: 'bitnamilegacy/kafka:latest'
    ports:
      - '9092:9092'
      - '29092:29092'
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list > /dev/null 2>&1" ]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - net
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,DOCKER://:29092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,DOCKER://kafka:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,DOCKER:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
  kafka-ui:
    container_name: kafka-ui
    image: 'provectuslabs/kafka-ui:latest'
    ports:
      - '8080:8080'
    depends_on:
      - kafka
    networks:
      - net
    environment:
      KAFKA_CLUSTERS_0_NAME: kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
  loki:
    container_name: loki
    image: grafana/loki:latest
    ports:
      - '3100:3100'
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - net
  promtail:
    container_name: promtail
    image: grafana/promtail:latest
    volumes:
      - /var/log:/var/log
    command: -config.file=/etc/promtail/config.yml
    networks:
      - net
  grafana:
    container_name: grafana
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_FEATURE_TOGGLES_ENABLE=alertingSimplifiedRouting,alertingQueryAndExpressionsStepMode
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy 
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
    image: grafana/grafana:latest
    ports:
      - '3000:3000'
    networks:
      - net
  postgres:
    container_name: postgres
    image: postgres
    restart: always
    shm_size: 128mb
    environment:
      - POSTGRES_PASSWORD=secret
    ports:
      - '5432:5432'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U root -d postgres" ]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - net
  minio:
    container_name: minio
    image: bitnamilegacy/minio
    ports:
      - '9000:9000'
      - '9001:9001'
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9000/minio/health/live || exit 1" ]
      interval: 5s
      timeout: 10s
      retries: 5
    environment:
      - MINIO_ROOT_USER=root
      - MINIO_ROOT_PASSWORD=secret123
      - MINIO_DEFAULT_BUCKETS=lot-images
      - MINIO_BROWSER=on
    networks:
      - net

  #########################
  # Cars' worker containers
  #########################
  proxy:
    container_name: proxy
    build:
      context: .
      dockerfile: Dockerfile
      target: proxy
    ports:
      - '8100:8100'
    depends_on:
      - loki
    networks:
      - net
  requester:
    container_name: requester
    build:
      context: .
      dockerfile: Dockerfile
      target: requester
    depends_on:
      loki:
        condition: service_started
      kafka:
        condition: service_healthy
      kafka_setup:
        condition: service_completed_successfully
    networks:
      - net
  persister:
    container_name: persister
    build:
      context: .
      dockerfile: Dockerfile
      target: persister
    depends_on:
      loki:
        condition: service_started
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      kafka_setup:
        condition: service_completed_successfully
      postgres_setup:
        condition: service_completed_successfully
      minio_setup:
        condition: service_completed_successfully
    networks:
      - net
  browser:
    container_name: browser
    build:
      context: .
      dockerfile: Dockerfile
      target: browser
    depends_on:
      loki:
        condition: service_started
      kafka:
        condition: service_healthy
      proxy:
        condition: service_healthy
      kafka_setup:
        condition: service_completed_successfully
    networks:
      - net
  sched:
    container_name: sched
    build:
      context: .
      dockerfile: Dockerfile
      target: sched
    depends_on:
      loki:
        condition: service_started
      kafka:
        condition: service_healthy
      kafka_setup:
        condition: service_completed_successfully
    networks:
      - net
  api:
    container_name: api
    build:
      context: .
      dockerfile: Dockerfile
      target: api
    ports:
      - '8081:8081'
    depends_on:
      loki:
        condition: service_started
      postgres:
        condition: service_healthy
      postgres_setup:
        condition: service_completed_successfully
    networks:
      - net

  ###########################
  # Cars' one-shot containers
  ###########################
  postgres_setup:
    container_name: postgres_setup
    build:
      context: .
      dockerfile: Dockerfile
      target: postgres-setup
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - net
  minio_setup:
    container_name: minio_setup
    build:
      context: .
      dockerfile: Dockerfile
      target: minio-setup
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - net
  kafka_setup:
    container_name: kafka_setup
    build:
      context: .
      dockerfile: Dockerfile
      target: kafka-setup
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - net

networks:
  net:
    driver: bridge
